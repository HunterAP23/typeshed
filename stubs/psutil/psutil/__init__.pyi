import sys
from collections.abc import Generator, Iterable
from typing import Any, ContextManager, NamedTuple

from ._common import (
    AIX as AIX,
    BSD as BSD,
    CONN_CLOSE as CONN_CLOSE,
    CONN_CLOSE_WAIT as CONN_CLOSE_WAIT,
    CONN_CLOSING as CONN_CLOSING,
    CONN_ESTABLISHED as CONN_ESTABLISHED,
    CONN_FIN_WAIT1 as CONN_FIN_WAIT1,
    CONN_FIN_WAIT2 as CONN_FIN_WAIT2,
    CONN_LAST_ACK as CONN_LAST_ACK,
    CONN_LISTEN as CONN_LISTEN,
    CONN_NONE as CONN_NONE,
    CONN_SYN_RECV as CONN_SYN_RECV,
    CONN_SYN_SENT as CONN_SYN_SENT,
    CONN_TIME_WAIT as CONN_TIME_WAIT,
    FREEBSD as FREEBSD,
    LINUX as LINUX,
    MACOS as MACOS,
    NETBSD as NETBSD,
    NIC_DUPLEX_FULL as NIC_DUPLEX_FULL,
    NIC_DUPLEX_HALF as NIC_DUPLEX_HALF,
    NIC_DUPLEX_UNKNOWN as NIC_DUPLEX_UNKNOWN,
    OPENBSD as OPENBSD,
    OSX as OSX,
    POSIX as POSIX,
    POWER_TIME_UNKNOWN as POWER_TIME_UNKNOWN,
    POWER_TIME_UNLIMITED as POWER_TIME_UNLIMITED,
    STATUS_DEAD as STATUS_DEAD,
    STATUS_DISK_SLEEP as STATUS_DISK_SLEEP,
    STATUS_IDLE as STATUS_IDLE,
    STATUS_LOCKED as STATUS_LOCKED,
    STATUS_PARKED as STATUS_PARKED,
    STATUS_RUNNING as STATUS_RUNNING,
    STATUS_SLEEPING as STATUS_SLEEPING,
    STATUS_STOPPED as STATUS_STOPPED,
    STATUS_TRACING_STOP as STATUS_TRACING_STOP,
    STATUS_WAITING as STATUS_WAITING,
    STATUS_WAKING as STATUS_WAKING,
    STATUS_ZOMBIE as STATUS_ZOMBIE,
    SUNOS as SUNOS,
    WINDOWS as WINDOWS,
    AccessDenied as AccessDenied,
    Error as Error,
    NoSuchProcess as NoSuchProcess,
    TimeoutExpired as TimeoutExpired,
    ZombieProcess as ZombieProcess,
    addr as addr,
    pconn as pconn,
    pcputimes as pcputimes,
    pctxsw as pctxsw,
    pgids as pgids,
    popenfile as popenfile,
    pthread as pthread,
    puids as puids,
    sbattery as sbattery,
    scpufreq as scpufreq,
    scpustats as scpustats,
    sdiskio as sdiskio,
    sdiskpart as sdiskpart,
    sdiskusage as sdiskusage,
    sfan as sfan,
    shwtemp as shwtemp,
    sswap as sswap,
)

if sys.platform != "darwin":
    from ._common import pio as pio, pionice as pionice

if sys.platform == "linux":
    from ._pslinux import (
        IOPRIO_CLASS_BE as IOPRIO_CLASS_BE,
        IOPRIO_CLASS_IDLE as IOPRIO_CLASS_IDLE,
        IOPRIO_CLASS_NONE as IOPRIO_CLASS_NONE,
        IOPRIO_CLASS_RT as IOPRIO_CLASS_RT,
        pfullmem as pfullmem,
        pmem as pmem,
        pmmap_ext as pmmap_ext,
        pmmap_grouped as pmmap_grouped,
        ppid_map as ppid_map,
        scputimes as scputimes,
        svmem as svmem,
    )
elif sys.platform == "win32":
    from ._psutil_windows import (
        ABOVE_NORMAL_PRIORITY_CLASS as ABOVE_NORMAL_PRIORITY_CLASS,
        BELOW_NORMAL_PRIORITY_CLASS as BELOW_NORMAL_PRIORITY_CLASS,
        HIGH_PRIORITY_CLASS as HIGH_PRIORITY_CLASS,
        IDLE_PRIORITY_CLASS as IDLE_PRIORITY_CLASS,
        NORMAL_PRIORITY_CLASS as NORMAL_PRIORITY_CLASS,
        REALTIME_PRIORITY_CLASS as REALTIME_PRIORITY_CLASS,
    )
    from ._pswindows import (
        CONN_DELETE_TCB as CONN_DELETE_TCB,
        IOPRIO_HIGH as IOPRIO_HIGH,
        IOPRIO_LOW as IOPRIO_LOW,
        IOPRIO_NORMAL as IOPRIO_NORMAL,
        IOPRIO_VERYLOW as IOPRIO_VERYLOW,
        pfullmem as pfullmem,
        pmem as pmem,
        pmmap_ext as pmmap_ext,
        pmmap_grouped as pmmap_grouped,
        scputimes as scputimes,
        svmem as svmem,
        win_service_iter as win_service_iter,
    )

if sys.platform == "linux":
    PROCFS_PATH: str
AF_LINK: int
__author__: str
version_info: tuple[int]
__version__: str

class Process:
    def __init__(self, pid: Any | None = ...) -> None: ...
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def pid(self) -> int: ...
    def oneshot(self) -> ContextManager[None]: ...
    def as_dict(self, attrs: Any | None = ..., ad_value: Any | None = ...) -> dict: ...
    def parent(self) -> Process: ...
    def parents(self) -> list[Process]: ...
    def is_running(self) -> bool: ...
    def ppid(self) -> int: ...
    def name(self) -> str: ...
    def exe(self) -> str: ...
    def cmdline(self) -> str: ...
    def status(self) -> str: ...
    def username(self) -> str: ...
    def create_time(self) -> float: ...
    def cwd(self) -> str: ...
    def nice(self, value: Any | None = ...) -> int: ...
    def uids(self) -> puids: ...
    def gids(self) -> pgids: ...
    def terminal(self) -> str: ...
    def num_fds(self) -> int: ...
    if sys.platform != "darwin":
        def io_counters(self) -> pio: ...
        def ionice(self, ioclass: Any | None = ..., value: Any | None = ...) -> pionice: ...
    if sys.platform == "linux":
        def rlimit(self, resource: int, limits: tuple[int, int] | None = ...): ...
    if sys.platform != "darwin":
        def cpu_affinity(self, cpus: Any | None = ...) -> Iterable: ...
    if sys.platform == "linux":
        def cpu_num(self) -> int: ...
    def environ(self) -> dict: ...
    if sys.platform == "win32":
        def num_handles(self) -> int: ...
    def num_ctx_switches(self) -> pctxsw: ...
    def num_threads(self) -> int: ...
    def threads(self) -> list[pthread]: ...
    def children(self, recursive: bool = ...) -> list[Process]: ...
    def cpu_percent(self, interval: Any | None = ...) -> float: ...
    def cpu_times(self) -> pcputimes: ...
    def memory_info(self) -> pmem: ...
    def memory_info_ex(self) -> pmem: ...
    def memory_full_info(self) -> pfullmem: ...
    def memory_percent(self, memtype: str = ...) -> float: ...
    if sys.platform != "darwin":
        def memory_maps(self, grouped: bool = ...) -> list[pmmap_grouped]: ...
    def open_files(self) -> list[popenfile]: ...
    def connections(self, kind: str = ...) -> list[addr]: ...
    def send_signal(self, sig) -> None: ...
    def suspend(self) -> None: ...
    def resume(self) -> None: ...
    def terminate(self) -> None: ...
    def kill(self) -> None: ...
    def wait(self, timeout: Any | None = ...) -> int: ...

class Popen(Process):
    def __init__(self, *args, **kwargs) -> None: ...
    def __dir__(self) -> list[str]: ...
    def __enter__(self): ...
    def __exit__(self, *args, **kwargs): ...
    def __getattribute__(self, name): ...
    def wait(self, timeout: Any | None = ...) -> int: ...

def pids() -> list[int]: ...
def pid_exists(pid) -> bool: ...
def process_iter(attrs: Any | None = ..., ad_value: Any | None = ...) -> Generator[Process, None, Process]: ...
def wait_procs(procs, timeout: Any | None = ..., callback: Any | None = ...) -> None: ...
def cpu_count(logical: bool = ...) -> int: ...
def cpu_times(percpu: bool = ...) -> NamedTuple: ...
def cpu_percent(interval: Any | None = ..., percpu: bool = ...) -> float: ...
def cpu_times_percent(interval: Any | None = ..., percpu: bool = ...) -> NamedTuple | list[NamedTuple]: ...
def cpu_stats() -> scpustats: ...
def cpu_freq(percpu: bool = ...) -> Iterable[scpufreq | float]: ...
def getloadavg(): ...
def virtual_memory(): ...
def swap_memory(): ...
def disk_usage(path): ...
def disk_partitions(all: bool = ...): ...
def disk_io_counters(perdisk: bool = ..., nowrap: bool = ...): ...
def net_io_counters(pernic: bool = ..., nowrap: bool = ...): ...
def net_connections(kind: str = ...): ...
def net_if_addrs(): ...
def net_if_stats(): ...

if sys.platform == "linux":
    def sensors_temperatures(fahrenheit: bool = ...): ...
    def sensors_fans(): ...

if sys.platform != "win32":
    def sensors_battery(): ...

def boot_time(): ...
def users(): ...

if sys.platform == "linux":
    RLIMIT_AS: int
    RLIMIT_CORE: int
    RLIMIT_CPU: int
    RLIMIT_DATA: int
    RLIMIT_FSIZE: int
    RLIMIT_LOCKS: int
    RLIMIT_MEMLOCK: int
    RLIMIT_MSGQUEUE: int
    RLIMIT_NICE: int
    RLIMIT_NOFILE: int
    RLIMIT_NPROC: int
    RLIMIT_RSS: int
    RLIMIT_RTPRIO: int
    RLIMIT_SIGPENDING: int
    RLIMIT_STACK: int
    RLIM_INFINITY: int
